import * as React from "react";
import {
  Dispatch,
  ReactNode,
  SetStateAction,
  useEffect,
  useState,
} from "react";
import { Alert, Box, Stack, SxProps, Theme, Typography } from "@mui/material";
import InputField from "./ui/InputField";
import CustomSwitcher from "./ui/CustomSwitcher";
import CustomButton from "./ui/CustomButton";
import LocationAutocomplete from "./ui/LocationAutocomplete";
import { isDefaultSelectedItems } from "../helper";

interface LeftMenuProps {
  smallScreens: boolean;
  mediumScreens: boolean;
  largeScreens: boolean;
  locationsData: string[];
  categoriesData: string[];
  productsData: string[];
  selectedItems: {
    locations: string[];
    products: string[];
    categories: string[];
    has_cashback: boolean;
  };
  setSelectedItems: Dispatch<
    SetStateAction<{
      locations: string[];
      products: string[];
      categories: string[];
      has_cashback: boolean;
    }>
  >;
  handleSelectChange: (
    _type: "locations" | "products" | "categories",
  ) => (event: React.ChangeEvent<{ value: unknown }>) => void;
  handleSwitchChange: (_event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSubmit: () => void;
  language: "en" | "gr";
  children?: ReactNode;
}

const LeftMenu = ({
  smallScreens,
  mediumScreens,
  largeScreens,
  locationsData,
  productsData,
  categoriesData,
  selectedItems,
  handleSelectChange,
  handleSwitchChange,
  handleSubmit,
  language,
  children,
  setSelectedItems,
}: LeftMenuProps) => {
  const [showAlert, setShowAlert] = useState(false);

  useEffect(() => {
    setSelectedItems({
      locations: [],
      products: [],
      categories: [],
      has_cashback: false,
    });
  }, [language]);

  const containerStyles: SxProps = {
    backgroundColor: (theme: Theme) => theme.palette.common.white,
    color: (theme: Theme) => theme.palette.common.black,
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    // overflow: "auto",
    pt: 4,
    px: largeScreens ? 5 : !largeScreens && !smallScreens ? 6 : 2,
    width:
      largeScreens && !smallScreens
        ? "25%"
        : !smallScreens && mediumScreens
          ? "45%"
          : smallScreens
            ? "100%"
            : "35%",
    // height: "calc(100vh - 84px)",
    height: "100vh",
    mt: 1,
  };

  const handleSubmitClick = () => {
    if (isDefaultSelectedItems(selectedItems)) {
      setShowAlert(true);
    } else{
      setShowAlert(false)
      handleSubmit();
    }


  };

  return (
    <Box sx={containerStyles}>
      <Stack spacing={3} width={300}>
        <LocationAutocomplete
          locationsData={locationsData}
          selectedItems={selectedItems}
          setSelectedItems={setSelectedItems}
          language={language}
        />
      </Stack>

      <InputField
        items={productsData}
        selectedItems={selectedItems.products ?? []}
        onChange={handleSelectChange("products")}
        label={language === "en" ? "Products" : "Προϊόντα"}
        language={language}
      />
      <InputField
        items={categoriesData}
        selectedItems={selectedItems.categories ?? []}
        onChange={handleSelectChange("categories")}
        label={language === "en" ? "Categories" : "Κατηγορίες"}
        language={language}
      />

      <Box display={"flex"} alignItems={"center"} gap={2} py={"1rem"}>
        <Typography color={"text.secondary"}>
          {language === "en" ? "Has Cashback officers?" : "Παροχή Cashback;"}
        </Typography>
        <CustomSwitcher
          selectedItems={selectedItems.has_cashback ?? false}
          onChange={handleSwitchChange}
          language={language}
        />
      </Box>
      <Box
        display="flex"
        justifyContent="center"
        flexDirection={"column"}
        padding={"1rem"}
        width={300}
      >
        <CustomButton
          label={language === "en" ? "Search" : "Αναζητηση"}
          onClick={handleSubmitClick}
          sx={{ padding: 1.5 }}
        />
        {showAlert && (
          <Alert severity={"info"} sx={{ mt: 3, padding: "6px" }}>
            {language === "en"
              ? "Please select at least one option to search!"
              : "Παρακαλώ επιλέξτε τουλάχιστον μια επιλογή για αναζήτηση!"}
          </Alert>
        )}
      </Box>

      {!smallScreens && children}
    </Box>
  );
};

export default LeftMenu;
